package com.github.socialc0de.gsw.api.database.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.github.socialc0de.gsw.api.database.entity.TranslationEntity;
import com.github.socialc0de.gsw.api.database.entity.AudienceEntry;
import com.github.socialc0de.gsw.api.database.entity.PhraseCategory;

import com.github.socialc0de.gsw.api.database.dao.TranslationEntityDao;
import com.github.socialc0de.gsw.api.database.dao.AudienceEntryDao;
import com.github.socialc0de.gsw.api.database.dao.PhraseCategoryDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig translationEntityDaoConfig;
    private final DaoConfig audienceEntryDaoConfig;
    private final DaoConfig phraseCategoryDaoConfig;

    private final TranslationEntityDao translationEntityDao;
    private final AudienceEntryDao audienceEntryDao;
    private final PhraseCategoryDao phraseCategoryDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        translationEntityDaoConfig = daoConfigMap.get(TranslationEntityDao.class).clone();
        translationEntityDaoConfig.initIdentityScope(type);

        audienceEntryDaoConfig = daoConfigMap.get(AudienceEntryDao.class).clone();
        audienceEntryDaoConfig.initIdentityScope(type);

        phraseCategoryDaoConfig = daoConfigMap.get(PhraseCategoryDao.class).clone();
        phraseCategoryDaoConfig.initIdentityScope(type);

        translationEntityDao = new TranslationEntityDao(translationEntityDaoConfig, this);
        audienceEntryDao = new AudienceEntryDao(audienceEntryDaoConfig, this);
        phraseCategoryDao = new PhraseCategoryDao(phraseCategoryDaoConfig, this);

        registerDao(TranslationEntity.class, translationEntityDao);
        registerDao(AudienceEntry.class, audienceEntryDao);
        registerDao(PhraseCategory.class, phraseCategoryDao);
    }
    
    public void clear() {
        translationEntityDaoConfig.getIdentityScope().clear();
        audienceEntryDaoConfig.getIdentityScope().clear();
        phraseCategoryDaoConfig.getIdentityScope().clear();
    }

    public TranslationEntityDao getTranslationEntityDao() {
        return translationEntityDao;
    }

    public AudienceEntryDao getAudienceEntryDao() {
        return audienceEntryDao;
    }

    public PhraseCategoryDao getPhraseCategoryDao() {
        return phraseCategoryDao;
    }

}
